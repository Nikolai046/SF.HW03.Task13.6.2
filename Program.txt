using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

class Program
{
    static void Main()
    {
        string text = File.ReadAllText("text.txt");
        
        // Читаем список исключаемых слов
        HashSet<string> excludedWords = ReadExcludedWords();

        // Разделяем текст на слова
        char[] separators = new char[] { ' ', '.', ',', '!', '?', ':', ';', '\n', '\r', '\t' };
        string[] words = text.Split(separators, StringSplitOptions.RemoveEmptyEntries);

        // Создаем словарь для подсчета слов
        Dictionary<string, int> wordCount = new Dictionary<string, int>(StringComparer.OrdinalIgnoreCase);

        // Подсчитываем количество каждого слова, исключая слова из списка
        foreach (string word in words)
        {
            string cleanWord = CleanWord(word);
            if (!string.IsNullOrEmpty(cleanWord) && !excludedWords.Contains(cleanWord))
            {
                if (wordCount.ContainsKey(cleanWord))
                {
                    wordCount[cleanWord]++;
                }
                else
                {
                    wordCount[cleanWord] = 1;
                }
            }
        }

        // Сортируем слова по частоте (по убыванию)
        var sortedWords = wordCount.OrderByDescending(pair => pair.Value);

        // Выводим топ-10 самых часто встречающихся слов
        Console.WriteLine("Топ-10 самых часто встречающихся слов:");
        foreach (var pair in sortedWords.Take(10))
        {
            Console.WriteLine($"{pair.Key}: {pair.Value}");
        }
    }

    static string CleanWord(string word)
    {
        // Удаляем начальные и конечные не-буквенные символы
        int start = 0;
        int end = word.Length - 1;

        while (start < word.Length && !char.IsLetter(word[start]))
        {
            start++;
        }

        while (end >= 0 && !char.IsLetter(word[end]))
        {
            end--;
        }

        if (start <= end)
        {
            return word.Substring(start, end - start + 1).ToLower();
        }

        return string.Empty;
    }

    static HashSet<string> ReadExcludedWords()
    {
        HashSet<string> excludedWords = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
        string[] lines = File.ReadAllLines("excluded_words.txt");

        foreach (string line in lines)
        {
            string[] words = line.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
            foreach (string word in words)
            {
                excludedWords.Add(word.Trim().ToLower());
            }
        }

        return excludedWords;
    }
}
